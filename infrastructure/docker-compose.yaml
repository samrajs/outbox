version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-latest}
    hostname: zookeeper
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    volumes:
      - "./volumes/zookeeper/data:/var/lib/zookeeper/data"
      - "./volumes/zookeeper/transactions:/var/lib/zookeeper/log"
    networks:
      - ${GLOBAL_NETWORK:-online-portal}
  kafka-broker:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-latest}
    hostname: kafka-broker
    depends_on:
      zookeeper: 
        condition: service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server kafka-broker:9092 --list
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,LISTENER_LOCAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: producer
    volumes:
      - "./volumes/kafka/broker:/var/lib/kafka/data"
    networks:
      - ${GLOBAL_NETWORK:-online-portal}
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:9092
    networks:
      - ${GLOBAL_NETWORK:-online-portal}
  debezium:
    image: debezium/strimzi-connect
    build:
      context: debezium-strimzi
      args:
        DEBEZIUM_CONNECTOR_VERSION: "${DEBEZIUM_CONNECTOR_VERSION:-2.4.0.Alpha2}"
        STRIMZI_VERSION: "${STRIMZI_VERSION:-latest-kafka-3.5.1}"
    ports:
     - 8083:8083
    environment:
     - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
     - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka-broker:9092
     - |
         KAFKA_CONNECT_CONFIGURATION=
         key.converter=org.apache.kafka.connect.json.JsonConverter
         value.converter=org.apache.kafka.connect.json.JsonConverter
         key.converter.schemas.enable=false
         value.converter.schemas.enable=false
         group.id=connect
         offset.storage.topic=connect-offsets
         offset.storage.replication.factor=1
         config.storage.topic=connect-configs
         config.storage.replication.factor=1
         status.storage.topic=connect-status
         status.storage.replication.factor=1
         producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor
     - OTEL_SERVICE_NAME=kafka-connect
     - OTEL_TRACES_EXPORTER=otlp
     - OTEL_METRICS_EXPORTER=none
     - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
     - OTEL_TRACES_SAMPLER=always_on
     - STRIMZI_TRACING=opentelemetry
    command: /opt/kafka/kafka_connect_run.sh
    depends_on:
      kafka-broker:
        condition: service_healthy
    networks:
      - ${GLOBAL_NETWORK:-online-portal}
  postgres:
    container_name: postgres
    hostname: postgres
    image: quay.io/debezium/example-postgres:2.2
    restart: always
    environment:
        - POSTGRES_DB=postgres
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
    ports:
        - '5432:5432'
    volumes:
        - postgres:/var/lib/postgresql/data
    networks:
      - ${GLOBAL_NETWORK:-online-portal}
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
     - 4317:4317
     - 4318:4318
     - 16686:16686
    environment:
     - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ${GLOBAL_NETWORK:-online-portal}

  order:
    image: "samrajs/order-outbox:latest"
    container_name: order
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    ports:
      - "9080:9080"
    healthcheck:
      test: "curl --fail --silent localhost:9080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yaml
      service: microservice-base-config

  payment:
    image: "samrajs/payment-outbox:latest"
    container_name: payment
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-broker:9092
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "9180:9180"
    healthcheck:
      test: "curl --fail --silent localhost:9180/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yaml
      service: microservice-base-config

volumes:
    postgres: {}      
networks:
  online-portal:
    driver: bridge